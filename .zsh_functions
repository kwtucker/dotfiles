# -------------------------------------------------------------------
# Functions 
# -------------------------------------------------------------------

# -- GIT ------------------
#
# movetag 1.0.0
function movetaghead() {
	git push origin :$1 && git tag -fa -m "moving tag $1" $1 && git push origin master $1
}

# deletetag 1.0.0
function deletetag() {
	git push origin :$1 && git tag -d $1
}

# Environment ------------------
#
function dotfileslink() {
	ln -s ~/.whalebyte/dotfiles/.vimrc ~/.vimrc
	ln -s ~/.whalebyte/dotfiles/.gitconfig ~/.gitconfig
	ln -s ~/.whalebyte/dotfiles/.gitconfig_global ~/.gitconfig_global
	ln -s ~/.whalebyte/dotfiles/.tmux.conf ~/.tmux.conf
	ln -s ~/.whalebyte/dotfiles/.zshrc ~/.zshrc
	ln -s ~/.whalebyte/dotfiles/.zsh_functions ~/.zsh_functions
	ln -s ~/.whalebyte/dotfiles/.zsh_aliases ~/.zsh_aliases
	ln -s ~/.whalebyte/dotfiles/whalebyte.zsh-theme ~/.oh-my-zsh/themes
	ln -s ~/.whalebyte/dotfiles/.bat.conf ~/.bat.conf
}	

function cleanenv() {
	echo -n "\nARE YOU SURE [N/y]: "
	read  selection
	echo
	
	if [[ $selection == '' || `echo "$selection" | awk '{print tolower($0)}'` == 'n' ]]; then
		return
	fi

	if [[ `echo "$selection" | awk '{print tolower($0)}'` == 'y' ]]; then
		notesB ; rm -rf ~/{.whalebyte_secrets,.whalebyte_envs,.whalebyte,.ssh,.zsh,.zshrc,.zsh_functions,.zsh_aliases,.zsh_history,.vimrc,.gitconfig,go/src}
		return
	fi
}

function envsetup() {
	mkdir -p ~/go/{bin,pkg,src}
	mkdir -p ~/.vim/bundle
	git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
	dotfileslink
}

function leave() {
	cleanenv	
}

# -- Kubernetes ------------------
#
function loadkubectl() {
	if [ $commands[kubectl] ]; then 
		source <(kubectl completion zsh) 
	fi
}

function helm-toggle() {
    if [ -z "$1" ]; then
        echo "helm client and Tiller (server side) versions always must match. Simply toggle between different Helm versions installed by brew".
        echo
        echo "Usage: helm-toggle <Helm version>"
        echo
        echo "installed helm versions are:"
        brew info --json=v1  kubernetes-helm | jq -c '.[].installed[].version'
				echo "current helm version is:"
        brew info --json=v1  kubernetes-helm | jq '.[].linked_keg'
    else
        brew switch kubernetes-helm $1 > /dev/null # no appropriate error handling here if someone sets something silly
    fi
}

function kport() {
	local pod=$(echo PODS)
	local port=$(kubectl get pod ${pod} -o json | jq '.spec.containers | .[0].ports | .[0].containerPort')
	echo "Forwarding traffic from ${pod}:${port} to localhost:${port}"
	k port-forward ${pod} ${port}:${port} | bat -l log
}

function kip() {
	local node_ip=$(kubectl get pods -l name=tiller -o wide | awk 'NR>1 {print $7}')
	local node_ports=$(kubectl get svc -o json SVC | jq -r '.spec.ports[] | "\(.name) \(.nodePort)"')
	if [[ $(echo "${node_ports}" | wc -l) -eq 1 ]]; then
		echo "${node_ports}" \
			| awk -v ip="${node_ip}" '{print "http://" ip ":"$2}' > >(cat) > >(tr -d '\n' | pbcopy)
	else
		echo "${node_ports}" \
			| awk -v OFS='\t' -v ip="${node_ip}" '{print $1, " http://" ip ":"$2}' \
			| fzf-tmux --cycle \
			| awk '{print $2}' > >(cat) > >(tr -d '\n' | pbcopy)
	fi
}

function kenv() {
	local ctx=$(kubectl config current-context)
	local cns=$(kubectl config view --minify | grep namespace: | awk 'NR>0 {print $2}')
	local server=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
	echo "Context:    ${ctx}"
	echo "Namespace:  ${cns}"
	echo "Tiller:     $TILLER_NAMESPACE"
	echo "Server:     ${server}"
}

function tns() {
	local ctx=$(kubectl config current-context)
	local cns=$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${ctx}\")].context.namespace}")
	echo "${cns}" >! "${HOME}/.tiller_namespace"
	export TILLER_NAMESPACE=${cns}
	echo "Switched Tiller namespace to ${cns}"
}

# -- FZF --------------------
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fe() (
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
)

# -- TMUX --------------------
function tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# zsh; needs setopt re_match_pcre. Kill session
function tmk () {
    local sessions
    sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
    local i
    for i in "${(f@)sessions}"
    do
        [[ $i =~ '([^:]*):.*' ]] && {
            echo "Killing $match[1]"
            tmux kill-session -t "$match[1]"
        }
    done
}

# -- MISC ------------------
#
# turn hidden files on/off in Finder
function hiddenOn() { defaults write com.apple.Finder AppleShowAllFiles YES ; }
function hiddenOff() { defaults write com.apple.Finder AppleShowAllFiles NO ; }

# myIP address
function myip() {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

function colors() {
	for i in {0..255}; do
			printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"
	done
}

# Will commit backup for quiver notes. Pass the version in like "quiverB mm/dd/yy"
function notesB() {
	pw=`pwd`
	if [ ${#1} -ne 0 ]; then
		cd ~/.whalebyte/notes && gaa && sleep 2 &&  gcmsg "backup $1" && sleep 2 && git push origin master && sleep 6
   	else
		cd ~/.whalebyte/notes && gaa && sleep 2 &&  gcmsg "backup" && sleep 2 && git push origin master && sleep 6
   	fi
	cd $pw
}
