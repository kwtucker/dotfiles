# -------------------------------------------------------------------
# Functions 
# -------------------------------------------------------------------

# turn hidden files on/off in Finder
function hiddenOn() { defaults write com.apple.Finder AppleShowAllFiles YES ; }
function hiddenOff() { defaults write com.apple.Finder AppleShowAllFiles NO ; }

# myIP address
function myip() {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

# Will commit backup for quiver notes. Pass the version in like "quiverB mm/dd/yy"
function quiverB() {
	pw=`pwd`
	if [ ${#1} -ne 0 ]; then
		cd ~/.whalebyte/notes/quiver_notes && gaa && sleep 2 &&  gcmsg "backup $1" && sleep 2 && git push origin master && sleep 6
   	else
		cd ~/.whalebyte/notes/quiver_notes && gaa && sleep 2 &&  gcmsg "backup" && sleep 2 && git push origin master && sleep 6
   	fi
	cd $pw
}

# movetag 1.0.0
function movetaghead() {
	git push origin :$1 && git tag -fa -m "moving tag $1" $1 && git push origin master $1
}

# deletetag 1.0.0
function deletetag() {
	git push origin :$1 && git tag -d $1
}

# 				TAG   COMMIT
# movetagcommit 2.0.4 ad243ff <BRANCH_NAME>
function movetagcommit() {
	git push origin :$1 && git tag -fa -m "moving tag $1 to commit $2" $1 $2 && git push origin $3 $1
}

function loadkubectl() {
	if [ $commands[kubectl] ]; then 
		source <(kubectl completion zsh) 
	fi
}

function kcx() {
	kc exec $1 -it -- /bin/bash
}

function kcs() {
	lab=alpha.k8s.aort.theplatform.com
	prod=alpha.k8s.aort.theplatform.com

	if [[ $1 == "prod" ]]; then
		kubectl config use-context $prod 
		kubectl get pods	
		return
	elif [[ $1 == "lab" ]]; then
		kubectl config use-context $lab 
		kubectl get pods	
		return 	
	fi

	contexts=($(kubectl config get-contexts | awk '{print $2}'))

	echo "\nContexts\n" 

	j=1
	for i in "${contexts[@]:1}"
	do
		echo $j") "$i
		((j++))
	done

	# read -e -p 'Select your context and press [ENTER]: ' -i "(Lab?)" selection 
	echo -n "\nSelect your context and press [ENTER]: "
	read  selection
	echo	

	# un signed ints match 
  re='^[0-9]+([.][0-9]+)?$'
	
	# If the selection is equal to a number and greater than 0. 
	if [[ $selection =~ $re && $selection -gt 0 ]]; then
		context=($(echo "${contexts[$selection+1]}" | cut -d " " -f1))
		if [[ $context != "" ]]; then
			kubectl config use-context $context 
			kubectl get pods	
			return
		fi
	fi

	# Defualt to Lab
	echo "Selection Not Valid ${selection}"
	echo "\nSelecting Lab Cluster"
	kubectl config use-context $lab 
	echo
	kubectl get pods
}


function envsetup() {
	mkdir -p ~/.whalebyte{Code,notes/quiver_notes} ; touch ~/{.whalebyte_secrets,.whalebyte_envs}
	mkdir -p ~/go/{bin,pkg,src}
	mkdir -p ~/.vim/bundle
	git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
	ln -s ~/.whalebyte/dotfiles/.vimrc ~/.vimrc
	ln -s ~/.whalebyte/dotfiles/.bash_profile ~/.bash_profile
	ln -s ~/.whalebyte/dotfiles/.gitconfig ~/.gitconfig
	ln -s ~/.whalebyte/dotfiles/.tmux.conf ~/.tmux.conf
	ln -s ~/.whalebyte/dotfiles/.zshrc ~/.zshrc
	ln -s ~/.whalebyte/dotfiles/.zsh_functions ~/.zsh_functions
	ln -s ~/.whalebyte/dotfiles/.zsh_aliases ~/.zsh_aliases
}

function leave() {
	quiverB ; cp -rf ~/go/src/github.comcast.com/lrm  ~/.whalebyte/Comcast/code_backup ; cp -rf ~/go/src/github.com/kwtucker  ~/.whalebyte/code_backup
}

function cleanenv() {
	echo -n "\nARE YOU SURE [N/y]: "
	read  selection
	echo
	
	if [[ $selection == '' || `echo "$selection" | awk '{print tolower($0)}'` == 'n' ]]; then
		return
	fi

	if [[ `echo "$selection" | awk '{print tolower($0)}'` == 'y' ]]; then
		rm -rf ~/{.whalebyte_secrets,.whalebyte_envs,.whalebyte,.ssh,.zsh,.zshrc,.zsh_functions,.zsh_aliases,.zsh_history,.vimrc,.gitconfig,.bash_profile,go/src}
		return
	fi
}

