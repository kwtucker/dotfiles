
# -------------------------------------------------------------------
# Alias 
# -------------------------------------------------------------------

# for the better man pages
alias m="tldr"

alias up="cd .. && ls -la |  awk '{print \$9,\$10}'"
alias c='clear'
alias v='vim'
alias zshrc="vim ~/.whalebyte/dotfiles/.zshrc"

# ---- Kubernetes ----
# alias kc='kubectl'
# alias kcp='kubectl get pods'
alias kctx='kubectx && kcp'

# ---- WhaleByte ----
alias wb='cd ~/.whalebyte'
alias wbc='cd ~/.whalebyte/Code/'
alias wbn='code ~/.whalebyte/notes'

# Envs
alias wbee='vim ~/.whalebyte/envs'
alias wbe='cat ~/.whalebyte/envs'

# Secrets
alias wbse='vim ~/.whalebyte/secrets'
alias wbs='cat ~/.whalebyte/secrets'

# ---- GO ----
alias gohome="cd ~/go/src/github.com/kwtucker/ && tree -L 1"
alias gowork="cd ~/go/src/github.comcast.com/yggdrasil/go && tree -L 1"

alias goygg="cd ~/go/src/github.comcast.com/yggdrasil/go"
alias gopillar="cd ~/go/src/github.comcast.com/viper-cog/pillar"
alias golrmui="cd ~/go/src/github.comcast.com/lrm/ui"
alias golrmadp="cd ~/go/src/github.comcast.com/lrm/adapter"
alias golrmpub="cd ~/go/src/github.comcast.com/lrm/publisher"
alias golrmesni="cd ~/go/src/github.comcast.com/lrm/esni"

# ---- PHP ----
alias composer="php /usr/local/bin/composer.phar"


# ---- dotfile git push ----
alias dotpush='pwd=`pwd` && cd ~/.whalebyte/dotfiles && gaa && sleep 2 &&  gcmsg "update dotfiles" && sleep 2 && git push origin master && sleep 6 && cd $pwd'


# ---- dotfile git pull ----
alias dotpull='pwd=`pwd` && cd ~/.whalebyte/dotfiles && git pull && sleep 6 && cd $pwd'


# ---- dotfile cd ----
alias dot='cd ~/.whalebyte/dotfiles && vim .'

alias docker_rm_all="docker rm \`docker ps -a -q\`"
alias docker_rmi_all="docker rmi \`docker images -q\`"
alias docker_rmi_dangling="docker rmi \`docker images -qa -f 'dangling=true'\`"

alias loadnvm='[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"'

alias ctags="`brew --prefix`/bin/ctags"
alias tag='ctags -R -f ./.git/tags .'


if [ $commands[kubectl] ]; then
  function kubectl() {
    source <(command kubectl completion zsh)
    command kubectl "$@"
  }
fi

if [ $commands[stern] ]; then
  function stern() {
    source <(command stern --completion=zsh)
    command stern "$@"
  }
fi

alias k='kubectl'
alias kp='k get pods -o wide'
alias ks='k get services -o wide'
alias ke='k exec -it PODS bash'
alias kl='k logs -f PODS'
alias kdp='k describe pod PODS'
alias kds='k describe service SVC'
alias kcs='k config use-context CTX && tns'
alias kgc='k config get-contexts'
alias kgsa='k get pod PODS -o json | jq .spec.serviceAccount'
alias kgsan='k get pod PODS -o json | jq .spec.serviceAccountName'
alias -g PODS='$(  kubectl get pods  | fzf-tmux --header-lines=1 --reverse --multi --cycle | awk "{print \$1}")'
alias -g DEPLOY='$(kubectl get deploy| fzf-tmux --header-lines=1 --reverse --multi --cycle | awk "{print \$1}")'
alias -g RS='$(    kubectl get rs    | fzf-tmux --header-lines=1 --reverse --multi --cycle | awk "{print \$1}")'
alias -g SVC='$(   kubectl get svc   | fzf-tmux --header-lines=1 --reverse --multi --cycle | awk "{print \$1}")'
alias -g ING='$(   kubectl get ing   | fzf-tmux --header-lines=1 --reverse --multi --cycle | awk "{print \$1}")'
alias -g CTX='$(   kubectl config get-contexts -o=name | sort -fd | fzf-tmux --reverse --multi --cycle)'

function kip() {
	# local node_ip=$(kubectl cluster-info | grep master | egrep -o '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
	local node_ip=$(kubectl get pods -l name=tiller -o wide | awk 'NR>1 {print $7}')
	local node_ports=$(kubectl get svc -o json SVC | jq -r '.spec.ports[] | "\(.name) \(.nodePort)"')
	if [[ $(echo "${node_ports}" | wc -l) -eq 1 ]]; then
		echo "${node_ports}" \
			| awk -v ip="${node_ip}" '{print "http://" ip ":"$2}' > >(cat) > >(tr -d '\n' | pbcopy)
	else
		echo "${node_ports}" \
			| awk -v OFS='\t' -v ip="${node_ip}" '{print $1, " http://" ip ":"$2}' \
			| fzf-tmux --cycle \
			| awk '{print $2}' > >(cat) > >(tr -d '\n' | pbcopy)
	fi
}

function kenv() {
	local ctx=$(kubectl config current-context)
	local cns=$(kubectl config view --minify | grep namespace: | awk 'NR>0 {print $2}')
	echo "Context:    ${ctx}"
	echo "Namespace:  ${cns}"
	echo "Tiller:     $TILLER_NAMESPACE"
}

function tns() {
	local ctx=$(kubectl config current-context)
	local cns=$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${ctx}\")].context.namespace}")
	echo "${cns}" >! "${HOME}/.tiller_namespace"
	export TILLER_NAMESPACE=${cns}
	echo "Switched Tiller namespace to ${cns}"
}